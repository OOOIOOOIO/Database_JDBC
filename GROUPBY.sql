--PLAYER / TEAM_ID 가 K01인 선수(*) 검색
SELECT * FROM PLAYER WHERE TEAM_ID='K01'; 
--PLAYER / TEAM_ID가 K07이 아닌 선수 검색
SELECT * FROM PLAYER WHERE TEAM_ID != 'K07';
--PLAYER / WEIGHT가 80 이하인 선수 검색
SELECT * FROM PLAYER WHERE WEIGHT<=80;
--PLAYER / HEIGHT가 170 이상인 선수 검색
SELECT * FROM PLAYER WHERE HEIGHT >= 170;
--PLAYER / HEIGHT는 170이하 이면서 WEIGHT가 70이상인 선수 검색
SELECT * FROM PLAYER WHERE HEIGHT <= 170 AND WEIGHT >= 70;
--PLAYER / TEAM_ID는 K03 이고 JOIN_YYYY 가 2011인 선수 검색
SELECT * FROM PLAYER WHERE TEAM_ID = 'K03' AND JOIN_YYYY = '2011';
--PLAYER / TEAM_ID가 K04 이고 JOIN_YYYY 가 2011~2012인 선수 검색
SELECT * FROM PLAYER WHERE TEAM_ID='K04' AND JOIN_YYYY IN ('2011','2012');
--PLAYER / BIRTH_DATE가 1987년 이후인 선수 검색
SELECT * FROM PLAYER
WHERE BIRTH_DATE>=TO_DATE('1987/01/01 00:00:00','YYYY/MM/DD HH24:MI:SS');
SELECT * FROM PLAYER WHERE BIRTH_DATE>='1987-01-01';

SELECT * FROM PLAYER WHERE TO_CHAR(BIRTH_DATE,'YYYY')>='1987';

--형변환
SELECT TO_NUMBER('12515') FROM DUAL;
SELECT TO_CHAR(125) FROM DUAL;

--SYSDATE : 현재 시간값
SELECT SYSDATE FROM DUAL; 
SELECT TO_CHAR(SYSDATE) FROM DUAL; -- '09-NOV-21'
SELECT TO_CHAR(SYSDATE,'YY/MM/DD') FROM DUAL; -- '21/11/09'
SELECT TO_CHAR(SYSDATE,'YY-MM-DD') FROM DUAL; -- '21-11-09'
SELECT TO_CHAR(SYSDATE,'YYYY') FROM DUAL; -- '2021'
SELECT TO_CHAR(SYSDATE,'HH24:MI:SS') FROM DUAL; -- '19:38:26'

SELECT TO_DATE('2021-12-25 14:00:00','YYYY-MM-DD HH24:MI:SS') FROM DUAL;

--연결
SELECT 'FLO' || 'WER' "꽃" FROM DUAL;
--선수번호-선수이름
SELECT PLAYER_ID||'-'||PLAYER_NAME "선수명단" FROM PLAYER;

--LIKE 조건식
SELECT PLAYER_NAME FROM PLAYER WHERE PLAYER_NAME LIKE('이_%');

--선수이름, 별명 검색
SELECT PLAYER_NAME "선수이름", NVL(NICKNAME,'별명없음') "별명" FROM PLAYER;
SELECT PLAYER_NAME "선수이름", NVL2(NICKNAME,'별명있음','별명없음') "별명"
FROM PLAYER;
SELECT PLAYER_NAME "선수이름", NVL2(NICKNAME,NICKNAME,'별명없음') "별명"
FROM PLAYER;

SELECT * FROM PLAYER;
SELECT SUM(HEIGHT),MAX(HEIGHT),MIN(HEIGHT),AVG(HEIGHT),COUNT(NVL(HEIGHT,0))
FROM PLAYER;

--GROUP BY
SELECT TEAM_ID, MAX(HEIGHT) FROM PLAYER GROUP BY TEAM_ID;

--HAVING
SELECT TEAM_ID, MAX(HEIGHT) FROM PLAYER GROUP BY TEAM_ID
HAVING MAX(HEIGHT)>=185;

--ORDER BY
SELECT TEAM_ID, MAX(HEIGHT) FROM PLAYER GROUP BY TEAM_ID
HAVING MAX(HEIGHT)>=185 ORDER BY TEAM_ID;

SELECT TEAM_ID, MAX(HEIGHT) M FROM PLAYER GROUP BY TEAM_ID
HAVING MAX(HEIGHT)>=185 ORDER BY M DESC;

--EMPLOYEES / JOB_ID 별로 평균 SALARY가 10000미만인 그룹들의
--SALARY 합계, 평균, 최대값, 최소값, JOB_ID별 명수 검색
SELECT
	JOB_ID 직종,
	SUM(SALARY) 합계,
	AVG(SALARY) 평균,
	MAX(SALARY) 최대값,
	MIN(SALARY) 최소값,
	COUNT(*) "명수"
FROM EMPLOYEES GROUP BY JOB_ID HAVING AVG(SALARY)<10000;
--T_PROFESSOR / 학과별 평균 급여 검색, 평균 급여가 450보다 높은 학과만 검색
SELECT DEPTNO 학과, AVG(PAY) "평균 급여"
FROM T_PROFESSOR GROUP BY DEPTNO HAVING AVG(PAY) > 450;
--PLAYER / 몸무게가 80 이상인 선수들의 평균키가 180이상인 포지션 검색
SELECT "POSITION" 포지션 FROM PLAYER WHERE WEIGHT>=80
GROUP BY "POSITION" HAVING AVG(HEIGHT)>=180;
--T_PROFESSOR / 학과별, 직급별로 교수들의 평균 급여 검색
SELECT
	DEPTNO 학과,
	"POSITION" 직급,
	AVG(PAY) "평균 급여"
FROM T_PROFESSOR GROUP BY DEPTNO,"POSITION";
--T_EMP / 매니저(MGR)별로 관리하는 직원들의
--매니저, 직원수, 급여총액, 급여평균, 교통비(COMM) 평균 지급액 검색
--단 사장님(JOB = 'PRESIDENT')은 제외
SELECT * FROM T_EMP;
SELECT
	MGR "매니저 번호",
	COUNT(*) "직원 수",
	SUM(SAL) "급여 총액",
	AVG(SAL) "급여 평균",
	AVG(NVL(COMM,0)) "교통비 평균"
FROM T_EMP WHERE JOB!='PRESIDENT' GROUP BY MGR;
--NULL 비교
--컬럼 IS NULL : NULL 이라면 참
--컬럼 IS NOT NULL : NULL이 아니라면 참
SELECT
	MGR "매니저 번호",
	COUNT(*) "직원 수",
	SUM(SAL) "급여 총액",
	AVG(SAL) "급여 평균",
	AVG(NVL(COMM,0)) "교통비 평균"
FROM T_EMP GROUP BY MGR HAVING MGR IS NOT NULL;
--T_PROFESSOR / 직위가 정교수 혹은 조교수인 사람들 중에 과별로
--과번호, 소속교수 총 수, 근속일 평균, 급여 평균, 보너스 평균 검색
--DATE타입끼리 연산시에는 일 수로 계산된 결과가 나옴
SELECT SYSDATE - HIREDATE FROM T_PROFESSOR;
--CEIL(숫자) : 올림함수 / FLOOR(숫자) : 내림함수 / ROUND(숫자) : 반올림함수
SELECT
	DEPTNO "과 번호",
	COUNT(*) "소속교수 총수",
	CEIL(AVG(SYSDATE-HIREDATE)) "근속일 평균",
	AVG(PAY) "급여 평균",
	AVG(NVL(BONUS,0)) "보너스 평균"
FROM T_PROFESSOR WHERE "POSITION" IN ('정교수','조교수')
GROUP BY DEPTNO;







